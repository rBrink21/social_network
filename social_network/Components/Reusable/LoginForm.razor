@rendermode InteractiveServer
@using social_network.Model
@using social_network.Data
@using social_network.Components.Reusable
@inject UserService userService;
@inject NavigationManager nav;
@inject SessionService session;

@if (state == FormState.LoginForm)
{
    <form action="" class="w-25 mt-5" autocomplete="off">
        <div class="form-floating mb-3">
            <input @bind="loginUsername" type="text" class="form-control" id="username" placeholder="example">
            <label for="username">Username</label>
        </div>
        <div class="form-floating mb-3">
            <input @bind="loginPassword" type="password" class="form-control" id="password" placeholder="example">
            <label for="password">Password</label>
        </div>
        @if (loginSuccessful)
        {
            <Alert alertClass="success" alertMsg="Log in successful!"/>
        }
        @if (loginError)
        {
            <Alert alertClass="danger" alertMsg="User not found or wrong password"></Alert>
        }
        
        
        <button @onclick="Login" type="button" class="btn btn-success w-100 mb-3">Log in</button>
        <button @onclick="ToggleForms" type="button" class="btn btn-secondary w-100">Create Account</button>
    </form>
}

@if (state == FormState.CreateAccountForm)
{
    <EditForm Model="userToCreate" OnValidSubmit="HandleValidSubmit" autocomplete="off">
        <DataAnnotationsValidator/>
        
        <h3 class="text-center">Create Account</h3>

        <div class="form-floating mb-3">
            <InputText class="form-control" id="firstName" placeholder="John" @bind-Value="userToCreate.firstName"/>
            <label for="firstName">First Name</label>
        </div>

        <div class="form-floating mb-3">
            <InputText class="form-control" id="lastName" placeholder="Doe" @bind-Value="userToCreate.lastName"/>
            <label for="lastName">Last Name</label>
        </div>

        <div class="form-floating mb-3">
            <InputText class="form-control" id="username" placeholder="example" @bind-Value="userToCreate.username"/>
            <label for="username">Username</label>
        </div>

        <div class="form-floating mb-3">
            <InputText class="form-control" id="email" placeholder="example@example.com" @bind-Value="userToCreate.email"/>
            <label for="email">Email Address</label>
        </div>

        <div class="form-floating mb-3">
            <InputText type="password" class="form-control" id="password" placeholder="example" @bind-Value="userToCreate.password"/>
            <label for="password">Password</label>
        </div>

        <div class="form-floating mb-3">
            <InputDate class="form-control" id="birthdate" placeholder="Birth Date" @bind-Value="userToCreate.birthDate"/>
            <label for="birthdate">Birth Date</label>
        </div>
        <ValidationSummary />
        @if (errorMsg)
        {
            <div class="alert alert-danger mb-3">
                @errorText <button type="button" class="btn-close float-end" @onclick="() => { errorMsg = false;}"></button>
            </div>
        }
        
        <button type="submit" class="btn btn-primary w-100 mb-3">Submit</button>
        <button @onclick="ToggleForms" type="button" class="btn btn-danger w-100">Return to Log-in</button>
    </EditForm>
}

@if (state == FormState.Loading)
{
    <div class="spinner-border" role="status">
    </div>
}

@code {
    bool errorMsg = false;
    bool loginSuccessful;
    bool loginError;
    FormState state = FormState.LoginForm;
    enum FormState
    {
        LoginForm,
        CreateAccountForm,
        Loading,
    }
    
    private string loginUsername;
    private string loginPassword;
    
    string errorText = "";
    private User userToCreate = new User();

    private void HandleValidSubmit()
    {
        
        if (!userService.UsernameExists(userToCreate.username))
        {
            userService.AddUser(userToCreate);
        }
        else
        {
            errorMsg = true;
            errorText = "User already exists!";
        }
    }

    private void Login()
    {
        User? user;
        user = userService.FindUserByUsername(loginUsername);
        if (user != null)
        {
            if (user.password == loginPassword)
            { 
                session.loggedInUser = user.username;
                loginSuccessful = true;
                InvokeAsync(() =>
                {
                    nav.NavigateTo("/Feed");
                });
                return;
            }
            
        }
        loginError = true;
    }
    
    
    private void ToggleForms()
    {
        state = state switch
        {
            FormState.CreateAccountForm => FormState.LoginForm,
            FormState.LoginForm => FormState.CreateAccountForm,
            _ => state
        };
    }

}